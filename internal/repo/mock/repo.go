// Code generated by MockGen. DO NOT EDIT.
// Source: /home/linux/redhat/redhat_cc/internal/repo/interfaces.go

// Package mock_repo is a generated GoMock package.
package mock_repo

import (
	reflect "reflect"

	entity "github.com/aminesnow/redhat_cc/internal/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockObjectStore is a mock of ObjectStore interface.
type MockObjectStore struct {
	ctrl     *gomock.Controller
	recorder *MockObjectStoreMockRecorder
}

// MockObjectStoreMockRecorder is the mock recorder for MockObjectStore.
type MockObjectStoreMockRecorder struct {
	mock *MockObjectStore
}

// NewMockObjectStore creates a new mock instance.
func NewMockObjectStore(ctrl *gomock.Controller) *MockObjectStore {
	mock := &MockObjectStore{ctrl: ctrl}
	mock.recorder = &MockObjectStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObjectStore) EXPECT() *MockObjectStoreMockRecorder {
	return m.recorder
}

// DeleteObject mocks base method.
func (m *MockObjectStore) DeleteObject(bucket, objectID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteObject", bucket, objectID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteObject indicates an expected call of DeleteObject.
func (mr *MockObjectStoreMockRecorder) DeleteObject(bucket, objectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObject", reflect.TypeOf((*MockObjectStore)(nil).DeleteObject), bucket, objectID)
}

// ReadObject mocks base method.
func (m *MockObjectStore) ReadObject(bucket, objectID string) (*entity.Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadObject", bucket, objectID)
	ret0, _ := ret[0].(*entity.Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadObject indicates an expected call of ReadObject.
func (mr *MockObjectStoreMockRecorder) ReadObject(bucket, objectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadObject", reflect.TypeOf((*MockObjectStore)(nil).ReadObject), bucket, objectID)
}

// WriteObject mocks base method.
func (m *MockObjectStore) WriteObject(bucketID string, object entity.Object) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteObject", bucketID, object)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteObject indicates an expected call of WriteObject.
func (mr *MockObjectStoreMockRecorder) WriteObject(bucket, object interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteObject", reflect.TypeOf((*MockObjectStore)(nil).WriteObject), bucket, object)
}
