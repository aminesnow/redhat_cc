// Code generated by go-swagger; DO NOT EDIT.

package server

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Stores objects organized in buckets.",
    "title": "Bucket storage service",
    "version": "0.0.1"
  },
  "paths": {
    "/objects/{bucket}/{objectID}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "summary": "Download an object.",
        "operationId": "getObject",
        "parameters": [
          {
            "type": "string",
            "description": "Unique ID of the bucket",
            "name": "bucket",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Unique ID of the object to store",
            "name": "objectID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/object"
            }
          },
          "404": {
            "description": "Object not found"
          },
          "500": {
            "description": "Failed to fetch object."
          }
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "summary": "Upload an object or replace it's content if it exists.",
        "operationId": "uploadObject",
        "parameters": [
          {
            "type": "string",
            "description": "Unique ID of the bucket",
            "name": "bucket",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Unique ID of the object to store",
            "name": "objectID",
            "in": "path",
            "required": true
          },
          {
            "name": "object",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Object created",
            "schema": {
              "$ref": "#/definitions/objectId"
            }
          },
          "500": {
            "description": "Failed to store object."
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "summary": "Deletes an object.",
        "operationId": "deleteObject",
        "parameters": [
          {
            "type": "string",
            "description": "Unique ID of the bucket",
            "name": "bucket",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Unique ID of the object to store",
            "name": "objectID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Object not found"
          },
          "500": {
            "description": "Failed to delete object."
          }
        }
      }
    }
  },
  "definitions": {
    "object": {
      "description": "Object details",
      "type": "object",
      "properties": {
        "content": {
          "description": "Text content of the object",
          "type": "string"
        }
      }
    },
    "objectId": {
      "description": "Stored object id",
      "type": "object",
      "properties": {
        "id": {
          "description": "Stored object id",
          "type": "string"
        }
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Stores objects organized in buckets.",
    "title": "Bucket storage service",
    "version": "0.0.1"
  },
  "paths": {
    "/objects/{bucket}/{objectID}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "summary": "Download an object.",
        "operationId": "getObject",
        "parameters": [
          {
            "type": "string",
            "description": "Unique ID of the bucket",
            "name": "bucket",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Unique ID of the object to store",
            "name": "objectID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/object"
            }
          },
          "404": {
            "description": "Object not found"
          },
          "500": {
            "description": "Failed to fetch object."
          }
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "summary": "Upload an object or replace it's content if it exists.",
        "operationId": "uploadObject",
        "parameters": [
          {
            "type": "string",
            "description": "Unique ID of the bucket",
            "name": "bucket",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Unique ID of the object to store",
            "name": "objectID",
            "in": "path",
            "required": true
          },
          {
            "name": "object",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Object created",
            "schema": {
              "$ref": "#/definitions/objectId"
            }
          },
          "500": {
            "description": "Failed to store object."
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "summary": "Deletes an object.",
        "operationId": "deleteObject",
        "parameters": [
          {
            "type": "string",
            "description": "Unique ID of the bucket",
            "name": "bucket",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Unique ID of the object to store",
            "name": "objectID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Object not found"
          },
          "500": {
            "description": "Failed to delete object."
          }
        }
      }
    }
  },
  "definitions": {
    "object": {
      "description": "Object details",
      "type": "object",
      "properties": {
        "content": {
          "description": "Text content of the object",
          "type": "string"
        }
      }
    },
    "objectId": {
      "description": "Stored object id",
      "type": "object",
      "properties": {
        "id": {
          "description": "Stored object id",
          "type": "string"
        }
      }
    }
  }
}`))
}
